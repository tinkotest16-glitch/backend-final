Ialready have a working app CALLED EDGE MARKETS with: • lib/ → supabase.ts, queryClient.ts,priceSimulation.ts, tradingLogic.ts, utils.ts • components/ → charts, layout,models, trading, ui • Admin dashboard pages for Users, Deposits, Withdrawals,News (may be partial) I need you to fully implement and wire the missing adminfeatures (Copy Traders, Wallets, Quick Trade Lock, Alerts, Page Access) andmake sure News is fully CRUD‑capable — using the latest Supabase (2025). Do notbreak any existing code or pages. 0) Project rules • Reuse the existing folderstructure; do not create new top‑level folders. • Put any new admin UI intocomponents/ui and components/models (following existing design). • KeepTypeScript strictness similar to current project. • Use @tanstack/react-query(already present). • All admin‑privileged operations must use the server‑onlySupabase service role client. • Normal user data access must use the anonclient and respect RLS. • If a page/section is missing, create it and link itinto the admin sidebar/nav. • Keep file/exports named clearly; don’t renameexisting files/exports. • After changes, the app must build successfully. 1)Apply this SQL (exactly as is) in Supabase SQL Editor IMPORTANT: Run thisentire SQL block. Do not skip any line. -- ========================= -- ENABLEROW LEVEL SECURITY -- ========================= ALTER TABLE auth.users ENABLEROW LEVEL SECURITY; -- ========================= -- USERS TABLE --========================= CREATE TABLE public.users ( id UUID REFERENCESauth.users(id) PRIMARY KEY, email TEXT UNIQUE NOT NULL, full_name TEXT,trading_balance DECIMAL(12,2) DEFAULT 10000.00, demo_balance DECIMAL(12,2)DEFAULT 50000.00, is_admin BOOLEAN DEFAULT FALSE, created_at TIMESTAMP WITHTIME ZONE DEFAULT NOW(), updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW() );-- ========================= -- TRADING PAIRS -- =========================CREATE TABLE public.trading_pairs ( id UUID DEFAULT gen_random_uuid() PRIMARYKEY, symbol TEXT UNIQUE NOT NULL, name TEXT NOT NULL, current_priceDECIMAL(12,8) NOT NULL, price_change_24h DECIMAL(5,2) DEFAULT 0, volume_24hDECIMAL(15,2) DEFAULT 0, market_cap DECIMAL(15,2) DEFAULT 0, is_active BOOLEANDEFAULT TRUE, created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(), updated_atTIMESTAMP WITH TIME ZONE DEFAULT NOW() ); -- ========================= --TRADES -- ========================= CREATE TABLE public.trades ( id UUIDDEFAULT gen_random_uuid() PRIMARY KEY, user_id UUID REFERENCES public.users(id)NOT NULL, pair_symbol TEXT NOT NULL, trade_type TEXT CHECK (trade_type IN('buy', 'sell')) NOT NULL, amount DECIMAL(12,2) NOT NULL, entry_priceDECIMAL(12,8) NOT NULL, exit_price DECIMAL(12,8), duration INTEGER NOT NULL,status TEXT CHECK (status IN ('active', 'won', 'lost', 'closed')) DEFAULT'active', profit_loss DECIMAL(12,2) DEFAULT 0, stop_loss DECIMAL(12,8), take_profitDECIMAL(12,8), expires_at TIMESTAMP WITH TIME ZONE NOT NULL, closed_atTIMESTAMP WITH TIME ZONE, created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(),updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW() ); --========================= -- COPY TRADING -- ========================= CREATETABLE public.copy_trades ( id UUID DEFAULT gen_random_uuid() PRIMARY KEY,user_id UUID REFERENCES public.users(id) NOT NULL, trader_name TEXT NOT NULL,amount DECIMAL(12,2) NOT NULL CHECK (amount >= 800 AND amount <= 10000),status TEXT CHECK (status IN ('active', 'locked', 'completed')) DEFAULT'active', profit_loss DECIMAL(12,2) DEFAULT 0, lock_duration INTEGER DEFAULT86400, locked_until TIMESTAMP WITH TIME ZONE, created_at TIMESTAMP WITH TIMEZONE DEFAULT NOW(), updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW() ); --========================= -- DEPOSITS -- ========================= CREATE TABLEpublic.deposits ( id UUID DEFAULT gen_random_uuid() PRIMARY KEY, user_id UUIDREFERENCES public.users(id) NOT NULL, amount DECIMAL(12,2) NOT NULL,payment_method TEXT NOT NULL, status TEXT CHECK (status IN ('pending','completed', 'failed')) DEFAULT 'pending', transaction_id TEXT, approved_byUUID REFERENCES public.users(id), created_at TIMESTAMP WITH TIME ZONE DEFAULTNOW(), updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW() ); --========================= -- WITHDRAWALS -- ========================= CREATETABLE public.withdrawals ( id UUID DEFAULT gen_random_uuid() PRIMARY KEY,user_id UUID REFERENCES public.users(id) NOT NULL, amount DECIMAL(12,2) NOTNULL, withdrawal_method TEXT NOT NULL, wallet_address TEXT, status TEXT CHECK(status IN ('pending', 'completed', 'failed')) DEFAULT 'pending',transaction_id TEXT, fee DECIMAL(12,2) DEFAULT 0, approved_by UUID REFERENCESpublic.users(id), created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(), updated_atTIMESTAMP WITH TIME ZONE DEFAULT NOW() ); -- ========================= --WALLETS (ADMIN MANAGED) -- ========================= CREATE TABLEpublic.wallets ( id UUID DEFAULT gen_random_uuid() PRIMARY KEY, coin_symbolTEXT NOT NULL CHECK (coin_symbol IN ('BTC','ETH','USDT','USDC','TRX')), addressTEXT NOT NULL, qr_code_url TEXT, created_at TIMESTAMP WITH TIME ZONE DEFAULTNOW(), updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW() ); --========================= -- ALERTS -- ========================= CREATE TABLEpublic.alerts ( id UUID DEFAULT gen_random_uuid() PRIMARY KEY, user_id UUIDREFERENCES public.users(id) NOT NULL, message TEXT NOT NULL, redirect_url TEXT,is_active BOOLEAN DEFAULT TRUE, created_at TIMESTAMP WITH TIME ZONE DEFAULTNOW() ); -- ========================= -- PAGE ACCESS CONTROL --========================= CREATE TABLE public.user_page_access ( id UUIDDEFAULT gen_random_uuid() PRIMARY KEY, user_id UUID REFERENCES public.users(id)NOT NULL, page_name TEXT NOT NULL, is_enabled BOOLEAN DEFAULT TRUE ); --========================= -- SETTINGS (GLOBAL FLAGS) --========================= CREATE TABLE public.settings ( id UUID DEFAULTgen_random_uuid() PRIMARY KEY, setting_key TEXT UNIQUE NOT NULL, setting_valueTEXT NOT NULL, updated_at TIMESTAMP WITH TIME ZONE DEFAULT NOW() ); INSERT INTOpublic.settings (setting_key, setting_value) VALUES ('quick_trade_locked','false'); -- ========================= -- COPY TRADER PROFILES --========================= CREATE TABLE public.copy_trader_profiles ( id UUIDDEFAULT gen_random_uuid() PRIMARY KEY, name TEXT NOT NULL, min_amountDECIMAL(12,2) DEFAULT 100.00, max_amount DECIMAL(12,2) DEFAULT 10000.00, expected_return_pctDECIMAL(5,2), duration_days INT DEFAULT 30, is_active BOOLEAN DEFAULT TRUE,created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(), updated_at TIMESTAMP WITHTIME ZONE DEFAULT NOW() ); -- ========================= -- NEWS --========================= CREATE TABLE public.news ( id UUID DEFAULTgen_random_uuid() PRIMARY KEY, title TEXT NOT NULL, content TEXT NOT NULL,author UUID REFERENCES public.users(id), is_published BOOLEAN DEFAULT TRUE,created_at TIMESTAMP WITH TIME ZONE DEFAULT NOW(), updated_at TIMESTAMP WITHTIME ZONE DEFAULT NOW() ); -- ========================= -- POLICIES --========================= CREATE POLICY "Users can view own profile"ON public.users FOR SELECT USING (auth.uid() = id); CREATE POLICY "Users canupdate own profile" ON public.users FOR UPDATE USING (auth.uid() = id);CREATE POLICY "Users can view own trades" ON public.trades FOR SELECTUSING (auth.uid() = user_id); CREATE POLICY "Users can insert owntrades" ON public.trades FOR INSERT WITH CHECK (auth.uid() = user_id);CREATE POLICY "Users can update own trades" ON public.trades FORUPDATE USING (auth.uid() = user_id); CREATE POLICY "Users can view owncopy trades" ON public.copy_trades FOR SELECT USING (auth.uid() =user_id); CREATE POLICY "Users can insert own copy trades" ONpublic.copy_trades FOR INSERT WITH CHECK (auth.uid() = user_id); CREATE POLICY"Everyone can view trading pairs" ON public.trading_pairs FOR SELECTTO authenticated; CREATE POLICY "Users can view own deposits" ONpublic.deposits FOR SELECT USING (auth.uid() = user_id); CREATE POLICY"Users can insert own deposits" ON public.deposits FOR INSERT WITHCHECK (auth.uid() = user_id); CREATE POLICY "Users can view ownwithdrawals" ON public.withdrawals FOR SELECT USING (auth.uid() =user_id); CREATE POLICY "Users can insert own withdrawals" ONpublic.withdrawals FOR INSERT WITH CHECK (auth.uid() = user_id); CREATE POLICY"Everyone can view published news" ON public.news FOR SELECT USING(is_published = TRUE); -- Admin bypass CREATE POLICY "Admins can manageeverything" ON public.users FOR ALL USING (EXISTS (SELECT 1 FROMpublic.users u WHERE u.id =auth.uid() AND u.is_admin = true)); CREATE POLICY "Admins can managedeposits" ON public.deposits FOR ALL USING (EXISTS (SELECT 1 FROMpublic.users u WHERE u.id =auth.uid() AND u.is_admin = true)); CREATE POLICY "Admins can managewithdrawals" ON public.withdrawals FOR ALL USING (EXISTS (SELECT 1 FROMpublic.users u WHERE u.id =auth.uid() AND u.is_admin = true)); CREATE POLICY "Admins can managenews" ON public.news FOR ALL USING (EXISTS (SELECT 1 FROM public.users uWHERE u.id =auth.uid() AND u.is_admin = true)); -- Enable RLS ALTER TABLE public.usersENABLE ROW LEVEL SECURITY; ALTER TABLE public.trading_pairs ENABLE ROW LEVELSECURITY; ALTER TABLE public.trades ENABLE ROW LEVEL SECURITY; ALTER TABLEpublic.copy_trades ENABLE ROW LEVEL SECURITY; ALTER TABLE public.depositsENABLE ROW LEVEL SECURITY; ALTER TABLE public.withdrawals ENABLE ROW LEVELSECURITY; ALTER TABLE public.wallets ENABLE ROW LEVEL SECURITY; ALTER TABLEpublic.alerts ENABLE ROW LEVEL SECURITY; ALTER TABLE public.user_page_accessENABLE ROW LEVEL SECURITY; ALTER TABLE public.settings ENABLE ROW LEVELSECURITY; ALTER TABLE public.copy_trader_profiles ENABLE ROW LEVEL SECURITY;ALTER TABLE public.news ENABLE ROW LEVEL SECURITY; -- =========================-- SAMPLE TRADING PAIRS -- ========================= INSERT INTOpublic.trading_pairs (symbol, name, current_price, price_change_24h,volume_24h, market_cap) VALUES ('BTCUSD', 'Bitcoin / USD', 45000.00, 2.34,1500000000, 850000000000), ('ETHUSD', 'Ethereum / USD', 3200.00, -1.56,800000000, 380000000000), ('ADAUSD', 'Cardano / USD', 0.85, 5.67, 200000000,28000000000), ('SOLUSD', 'Solana / USD', 95.00, 3.45, 150000000, 42000000000),('DOGEUSD', 'Dogecoin / USD', 0.08, -2.1, 100000000, 11000000000); --========================= -- TRIGGERS & FUNCTIONS --========================= CREATE OR REPLACE FUNCTION update_updated_at_column()RETURNS TRIGGER AS $$ BEGIN NEW.updated_at = NOW(); RETURN NEW; END; $$language 'plpgsql'; CREATE TRIGGER update_users_updated_at BEFORE UPDATE ONpublic.users FOR EACH ROW EXECUTE FUNCTION update_updated_at_column(); CREATETRIGGER update_trading_pairs_updated_at BEFORE UPDATE ON public.trading_pairsFOR EACH ROW EXECUTE FUNCTION update_updated_at_column(); CREATE TRIGGERupdate_trades_updated_at BEFORE UPDATE ON public.trades FOR EACH ROW EXECUTEFUNCTION update_updated_at_column(); CREATE TRIGGERupdate_copy_trades_updated_at BEFORE UPDATE ON public.copy_trades FOR EACH ROWEXECUTE FUNCTION update_updated_at_column(); CREATE TRIGGERupdate_deposits_updated_at BEFORE UPDATE ON public.deposits FOR EACH ROWEXECUTE FUNCTION update_updated_at_column(); CREATE TRIGGERupdate_withdrawals_updated_at BEFORE UPDATE ON public.withdrawals FOR EACH ROWEXECUTE FUNCTION update_updated_at_column(); CREATE TRIGGERupdate_wallets_updated_at BEFORE UPDATE ON public.wallets FOR EACH ROW EXECUTEFUNCTION update_updated_at_column(); CREATE TRIGGERupdate_copy_trader_profiles_updated_at BEFORE UPDATE ONpublic.copy_trader_profiles FOR EACH ROW EXECUTE FUNCTIONupdate_updated_at_column(); CREATE TRIGGER update_news_updated_at BEFORE UPDATEON public.news FOR EACH ROW EXECUTE FUNCTION update_updated_at_column(); --========================= -- ADMIN FUNCTIONS -- =========================CREATE OR REPLACE FUNCTION add_random_balance(target_user UUID, min_amtDECIMAL, max_amt DECIMAL) RETURNS VOID AS $$ DECLARE random_amt DECIMAL; BEGINrandom_amt := floor(random() * (max_amt - min_amt + 1) + min_amt); UPDATEpublic.users SET trading_balance = trading_balance + random_amt WHERE id =target_user; END; $$ LANGUAGE plpgsql SECURITY DEFINER; CREATE OR REPLACEFUNCTION delete_user_account(target_user UUID) RETURNS VOID AS $$ BEGIN DELETEFROM public.users WHERE id = target_user; DELETE FROM auth.users WHERE id =target_user; END; $$ LANGUAGE plpgsql SECURITY DEFINER; 2) Supabase clients& environment Edit lib/supabase.ts to export two clients: //lib/supabase.ts import { createClient } from "@supabase/supabase-js";const url = process.env.NEXT_PUBLIC_SUPABASE_URL!; const anon =process.env.NEXT_PUBLIC_SUPABASE_ANON_KEY!; const service =process.env.SUPABASE_SERVICE_ROLE_KEY!; // server-only export const supabase =createClient(url, anon, { auth: { persistSession: true, autoRefreshToken: true,detectSessionInUrl: true }, }); // Use ONLY in server-side code (API routes,server actions) export const supabaseAdmin = createClient(url, service, { auth:{ persistSession: false }, }); Ensure .env contains: NEXT_PUBLIC_SUPABASE_URL=https://fmqlhrhgsormiqmsiafx.supabase.coNEXT_PUBLIC_SUPABASE_ANON_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImZtcWxocmhnc29ybWlxbXNpYWZ4Iiwicm9sZSI6ImFub24iLCJpYXQiOjE3NTU0NDQwMDEsImV4cCI6MjA3MTAyMDAwMX0.RTW2TEKPt4n0Ffgwsw2nbOxB-XOPnH6HrzTcTSUPABASE_SERVICE_ROLE_KEY=eyJhbGciOiJIUzI1NiIsInR5cCI6IkpXVCJ9.eyJpc3MiOiJzdXBhYmFzZSIsInJlZiI6ImZtcWxocmhnc29ybWlxbXNpYWZ4Iiwicm9sZSI6InNlcnZpY2Vfcm9sZSIsImlhdCI6MTc1NTQ0NDAwMSwiZXhwIjoyMDcxMDIwMDAxfQ.psF8dY3VNLUPa8TZU08AVOfZGjZfMQ8fbepjRlWmscQSUPABASE_JWT_SECRET=O2ZjMst3zk3MR70qajT/xxeQNGtuyefqAiWaRL7qq9ylZwms+t6CEj7nQpv9OPY8spCO/yQBO1kgSTYzOri/8g==SUPABASE_DATABASE_URL=postgresql://postgres:[Manico421.]@db.fmqlhrhgsormiqmsiafx.supabase.co:5432/postgres Never expose SUPABASE_SERVICE_ROLE_KEY to thebrowser. 3) Create/extend admin UI (generate if missing) If any of thesesections are missing, create them under components/ui and wire into the adminnavigation: • Users: list, add random balance (RPC), delete user (RPC) •Deposits: approve/decline → set status and approved_by • Withdrawals:approve/decline → set status and approved_by • Copy Traders: CRUD forcopy_trader_profiles; show/relate to copy_trades • Wallet Management: CRUDwallets; upload barcode to storage (store URL) • Quick Trade Lock: togglesettings.quick_trade_locked (setting_key = ‘quick_trade_locked’) • Alerts: CRUDalerts for specific user_id with optional redirect_url button • Page AccessControl: per‑user toggles in user_page_access • News: full CRUDon news, publish/unpublish, optional author assignment Follow existing designtokens/components; keep consistent styling. 4) React Query hooks (create ifmissing) Under lib/ or hooks/ (if you already keep hooks there), create thesecustom hooks. Use supabaseAdmin for admin mutations, supabase for public readswhere appropriate. Each hook must export: • list query (useQuery) •create/update/delete mutations (useMutation) • automatic cache invalidation (queryClient.invalidateQueries)Create the following hooks: • useAdminUsers() — list users;addRandomBalance(userId,min,max) (RPC), deleteUserAccount(userId) (RPC),updateUserBalances (optional) • useAdminDeposits() — list pending;approveDeposit(id, adminId) / declineDeposit(id, adminId) •useAdminWithdrawals() — list pending; approveWithdrawal(id, adminId) /declineWithdrawal(id, adminId) • useCopyTraders() — CRUD copy_trader_profiles;list profiles; link to recent copy_trades • useWallets() — CRUD wallets •useQuickTradeSetting() — getQuickTradeLocked() (read setting_key),toggleQuickTradeLocked() • useAlerts() — CRUD alerts for a given user_id •usePageAccess() — list/update user_page_access rows per user • useNewsAdmin() —CRUD news (title, content, author, is_published) Implementation details: • ForNews reads shown to normal users, usesupabase.from('news').select('*').eq('is_published', true).order('created_at',{ ascending:false }). • For admin News CRUD, use supabaseAdmin. • Forapprove/decline flows, update status and set approved_by = adminUserId. • ForRPCs: • add_random_balance: supabaseAdmin.rpc('add_random_balance', {target_user: id, min_amt, max_amt }) • delete_user_account:supabaseAdmin.rpc('delete_user_account', { target_user: id }) 5) Storage(optional for QR images) If not present, create a Supabase Storage bucketwallet-qrcodes (public). In Wallets UI, allow upload → store public URL inwallets.qr_code_url. 6) Wire into existing pages • Add/extend admin navigationto include: Copy Traders, Wallets, Quick Trade, Alerts, Page Access, News. • Onuser dashboard: • Respect settings.quick_trade_locked: hide/disable quick tradecontainer if true. • Show active alerts for the logged‑inuser at the top with an optional button to redirect_url. • Respectuser_page_access: if has_access=false for a given page_name, hide/disable thatpage/route. 7) Acceptance & safety checks • Build must pass. • All newpages render and perform CRUD successfully. • Normal users can only read/modifytheir own rows (RLS enforced). • Admin actions only work via supabaseAdmin onthe server. • News: users see only is_published = true; admins canpublish/unpublish. • Deposits/Withdrawals: approve/decline sets approved_by andupdates status. • Copy Traders: profiles manageable; existing copy trade tableremains untouched. • Wallet addresses editable and persisted, QR URLs saved. •Quick Trade lock toggle updates settings. • Alerts attach per user; button opensredirect_url. • Page access toggles work per user and are enforced in UI. 8)Small utilities to add (if missing) • lib/adminUser.ts — helper to get currentadmin user ID (from session) on server calls. • Shared types.ts for table rowtypes (infer from Supabase types if you generate types). 9) Do not breakexisting features • Keep current Users, Deposits, Withdrawals, News routes andcomponents functional. • Reuse queryClient.ts, tradingLogic.ts, utils.ts — nobreaking changes to exports. • Maintain current auth flow; do not changelogin/signup. 10) Final verification • Seed: ensure at least one admin userexists (users.is_admin = true) (admin name:"z@test.com",password:"421"). • Load admin dashboard → test each new section. •Test a normal user: can’t access admin pages; sees alerts, cannot seeunpublished news; respects page access flags; quick trade lock enforced. That’sit. Execute all steps above exactly.