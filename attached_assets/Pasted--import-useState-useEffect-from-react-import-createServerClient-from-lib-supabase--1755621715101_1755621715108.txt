
import { useState, useEffect } from 'react';
import { createServerClient } from '@/lib/supabase';

// Trading Pair Interface with new fields
interface TradingPair {
  id: number;
  symbol: string;
  name: string;
  basePrice: string;
  currentPrice: string;
  bid_price: number;
  ask_price: number;
  icon: string;
  color: string;
  volatility: string;
  isActive: boolean;
  created_at: string;
  updated_at: string;
}

export default function TradingPairsPage() {
  const [tradingPairs, setTradingPairs] = useState<TradingPair[]>([]);
  const [loading, setLoading] = useState(true);

  // Fetch Initial Trading Pairs
  const fetchTradingPairs = async () => {
    try {
      const supabase = createServerClient();
      const { data, error } = await supabase
        .from('trading_pairs')
        .select('*')
        .eq('isactive', TRUE)
        .order('created_at', { ascending: false });

      if (error) throw error;

      setTradingPairs(data || []);
    } catch (err) {
      console.error('Fetch Trading Pairs Error:', err);
    } finally {
      setLoading(false);
    }
  };

  // Update Trading Pair
  const updateTradingPair = async (
    id: number, 
    updates: { bid_price?: number; ask_price?: number }
  ) => {
    try {
      const supabase = createServerClient();
      const { data, error } = await supabase
        .from('trading_pairs')
        .update({
          bid_price: Number(updates.bid_price) || 0,
          ask_price: Number(updates.ask_price) || 0,
          updated_at: new Date().toISOString()
        })
        .eq('id', id)
        .select();

      if (error) throw error;
      
      // Refresh the data
      await fetchTradingPairs();
      return true;
    } catch (err) {
      console.error('Update Trading Pair Error:', err);
      return false;
    }
  };

  // Subscribe to real-time updates
  useEffect(() => {
    fetchTradingPairs();

    const supabase = createServerClient();
    const subscription = supabase
      .channel('trading_pairs_changes')
      .on('postgres_changes', 
        { 
          event: '*', 
          schema: 'public', 
          table: 'trading_pairs' 
        }, 
        (payload) => {
          console.log('Trading pair changed:', payload);
          fetchTradingPairs(); // Refresh data on any change
        }
      )
      .subscribe();

    return () => {
      subscription.unsubscribe();
    };
  }, []);

  if (loading) {
    return (
      <div className="flex items-center justify-center min-h-[400px]">
        <div className="text-lg">Loading trading pairs...</div>
      </div>
    );
  }

  return (
    <div className="container mx-auto p-6">
      <h1 className="text-3xl font-bold mb-6">Trading Pairs Management</h1>
      
      <div className="grid gap-4">
        {tradingPairs.map((pair) => (
          <div key={pair.id} className="border rounded-lg p-4 hover:shadow-md transition-shadow">
            <div className="flex items-center justify-between">
              <div className="flex items-center gap-3">
                <div className="w-8 h-8 rounded-full flex items-center justify-center text-white font-bold"
                     style={{ backgroundColor: pair.color }}>
                  {pair.symbol.slice(0, 2)}
                </div>
                <div>
                  <h3 className="font-semibold">{pair.symbol}</h3>
                  <p className="text-sm text-gray-600">{pair.name}</p>
                </div>
              </div>
              
              <div className="flex gap-4 items-center">
                <div className="text-right">
                  <div className="text-sm text-gray-500">Bid Price</div>
                  <div className="font-mono">{pair.bid_price?.toFixed(4) || '0.0000'}</div>
                </div>
                
                <div className="text-right">
                  <div className="text-sm text-gray-500">Ask Price</div>
                  <div className="font-mono">{pair.ask_price?.toFixed(4) || '0.0000'}</div>
                </div>
                
                <div className="text-right">
                  <div className="text-sm text-gray-500">Current Price</div>
                  <div className="font-mono font-semibold">{pair.currentPrice}</div>
                </div>
              </div>
            </div>
            
            <div className="mt-4 flex gap-2">
              <input
                type="number"
                step="0.0001"
                placeholder="Bid Price"
                className="px-3 py-1 border rounded text-sm"
                onBlur={(e) => {
                  const value = parseFloat(e.target.value);
                  if (value && value > 0) {
                    updateTradingPair(pair.id, { bid_price: value });
                  }
                }}
              />
              
              <input
                type="number"
                step="0.0001"
                placeholder="Ask Price"
                className="px-3 py-1 border rounded text-sm"
                onBlur={(e) => {
                  const value = parseFloat(e.target.value);
                  if (value && value > 0) {
                    updateTradingPair(pair.id, { ask_price: value });
                  }
                }}
              />
              
              <button
                onClick={() => updateTradingPair(pair.id, { 
                  bid_price: Math.random() * 100, 
                  ask_price: Math.random() * 100 + 0.1 
                })}
                className="px-3 py-1 bg-blue-500 text-white rounded text-sm hover:bg-blue-600"
              >
                Random Update
              </button>
            </div>
          </div>
        ))}
      </div>
    </div>
  );
}
